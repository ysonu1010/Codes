#include <iostream>
#include<queue>
using namespace std;
struct node{
    int data;
    node* left;
    node* right;
};
node* newnode(int x){
    node* temp=new node;
    temp->data=x;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}
node* Insert(node* root,int x){
    node* temp=newnode(x);
    if(root==NULL){
        root=temp;
    }
    else if(x<=root->data){
        root->left=Insert(root->left,x);
    }
    else{
        root->right=Insert(root->right,x);
    }
    return root;//always return main root of the whole tree
}

void level_order(node* root){//travel level by level or breadth traversal
	if(root==NULL) return ;
	queue<node*> q;
	q.push(root);
	
	while(!q.empty()){
	node* current=q.front();
	cout<<current->data<<"  ";
	if(current->left!=NULL) q.push(current->left);
	if(current->right) q.push(current->right); 
	q.pop();	
	}
}

void preorder(node* root){//visit->left->right order is followed
if (root==NULL) return;
		cout<<root->data;
		preorder(root->left);
		preorder(root->right);
}
void inorder(node* root){//printed elements in sorted order as we visit the smallest first
	if (root==NULL) return;
	inorder(root->left);//visiting the smallest first(left most) then start printing
	cout<<root->data;
	inorder(root->right);
}
void postorder(node* root){
	if (root==NULL) return;
	postorder(root->left);//visiting the smallest first(left most) then start printing
	postorder(root->right);
	cout<<root->data;
	
}
int main() {
    node* root=NULL;
    root=Insert(root,2);
    root=Insert(root,3);
    root=Insert(root,4);
    root=Insert(root,5);
    root=Insert(root,0);
    root=Insert(root,1);
    root=Insert(root,-1);
  	postorder(root);
	return 0;
}
